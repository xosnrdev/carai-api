name: CI/CD Pipeline to AWS ECR and ECS

# Trigger the workflow on push requests to the master branch and pull requests to master and development branches.
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - development
  # Allows manual triggering of the workflow.
  workflow_dispatch:

# Define global environment variables for the workflow.
env:
  AWS_REGION: us-east-1
  AWS_ROLE_ARN: arn:aws:iam::657214731516:role/CI_CD_ECS_ECR_OIDC_Role
  ECR_REPOSITORY: carai-api
  ECS_SERVICE: carai-api-service
  ECS_CLUSTER: api-cluster
  CONTAINER_NAME: carai-api-container
  PYTHON_IMAGE: python:3-alpine
  NODE_IMAGE: node:18-alpine
  PORT: ${{ secrets.PORT }}
  RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
  RATE_LIMIT_MAX: ${{ secrets.RATE_LIMIT_MAX }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  NODE_OPTIONS: ${{ secrets.NODE_OPTIONS }}

# Set permissions for the workflow.
permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  # Job to build the application and run tests.
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Setup Python
        run: docker pull ${{ env.PYTHON_IMAGE }}

      - name: Run Tests
        run: yarn run test:ci
        
      - name: Upload Coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  # Job to handle versioning and changelog generation.
  semantic-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          
      - name: Cache node modules (for Semantic Release)
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install dependencies (production only)
        run: yarn install --frozen-lockfile --production

      - name: Run Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job to push the built Docker image to Amazon ECR.
  push-to-ecr:
    needs: semantic-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: GithubActions

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Docker image
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          docker tag ${{ env.ECR_REPOSITORY }}:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Push Image to Amazon ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest

  # Job to deploy the new image to Amazon ECS.
  deploy-to-ecs:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Amazon ECS
        run: aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
