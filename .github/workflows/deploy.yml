name: AWS ECR and ECS Deployment Pipeline

on:
  workflow_run:
    workflows: ["CI - Build and Test Suite"]
    types: [completed]
  workflow_dispatch:

env:
  PORT: ${{ secrets.PORT }}
  RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
  RATE_LIMIT_MAX: ${{ secrets.RATE_LIMIT_MAX }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  NODE_OPTIONS: ${{ secrets.NODE_OPTIONS }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  build-and-deploy:
    name: Build, Tag, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker-compose build
        env:
          NODE_ENV: ${{ env.NODE_ENV }}

      - name: List Docker Images for Debugging
        run: docker images

      - name: Setup Node.js for Semantic Release
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Run Semantic Release
        id: semantic_release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: GithubActions

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine and Tag Image
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          FULL_IMAGE_NAME="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"
          echo "Full Image Name with Version Tag: $FULL_IMAGE_NAME:$IMAGE_TAG"
          echo "Full Image Name with Latest Tag: $FULL_IMAGE_NAME:latest"
          docker tag ${{ env.ECR_REPOSITORY }}:latest $FULL_IMAGE_NAME:$IMAGE_TAG
          docker tag ${{ env.ECR_REPOSITORY }}:latest $FULL_IMAGE_NAME:latest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Push Image to Amazon ECR
        run: |
          FULL_IMAGE_NAME="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"
          docker push $FULL_IMAGE_NAME:$IMAGE_TAG
          docker push $FULL_IMAGE_NAME:latest

      - name: Deploy to Amazon ECS
        run: aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment
