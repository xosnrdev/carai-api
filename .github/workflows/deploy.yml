name: AWS ECR and ECS Deployment Pipeline

on:
  workflow_run:
    workflows: ["CI - Build and Test Suite"]
    types:
      - completed
  # Allows manual triggering of the workflow.
  workflow_dispatch:

env:
  PORT: ${{ secrets.PORT }}
  RATE_LIMIT_WINDOW_MS: ${{ secrets.RATE_LIMIT_WINDOW_MS }}
  RATE_LIMIT_MAX: ${{ secrets.RATE_LIMIT_MAX }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  NODE_OPTIONS: ${{ secrets.NODE_OPTIONS }}

# Set permissions for the workflow.
permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        # Checks out the repository content to the GitHub Actions runner
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker-compose build
        env:
          NODE_ENV: ${{ env.NODE_ENV }}

  # Job to handle versioning and changelog generation.
  semantic-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Cache node modules (for Semantic Release)
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Install dependencies (production only)
        run: yarn install --frozen-lockfile --production

      - name: Run Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job to push the built Docker image to Amazon ECR.
  push-to-ecr:
    needs: semantic-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GithubActions

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Docker image
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Push Image to Amazon ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

  # Job to deploy the new image to Amazon ECS.
  deploy-to-ecs:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Amazon ECS
        run: aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
